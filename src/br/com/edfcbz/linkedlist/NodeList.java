package br.com.edfcbz.linkedlist;

/**
 * This class implements a Single List using Pointers that points to the next element.
 * @author Eduardo Carneiro
 * @version V.1
 */
public class NodeList {

	/**
	 * This class has two pointer, the first to head of the list and the last to final. 
	 */
	public static Node head = null;
	public static Node last = null;	

	/**
	 * This internal class, represents the Node of each element inserted in the list. In this case, each Node
	 * is a book in the list. See below the book's attributes. As a node, the bode know the book on beside. 
	 */
	static class Node {
		int key;
		String description;
		String author;
		double value;
		Node next;
		Node prior;

		/**
		 * This method implements the Constructor of each Node with Book's informations		 * 
		 * The prices and key identifications are generated by Constructor
		 * 
		 * @param String description: Define the Book's name
		 * @param String author: Informs the Book's author		  
		 */
		public Node(String description, String author) {
			this.description = description;
			this.author = author;
			this.value  = Math.random()*100; 
			this.key++;
			this.next = null;
		}
	}
	
	/**
	 * This method named addingNewNodeDinamically, add the Node in the list, doing this testing id the list is created.
	 * If not created or equal null, the code start the firs node, attributing the newNode to the head, because is the first node, as well
	 * add the same newNode as the final mode.
	 *  
	 * @param String description : The book's name
	 * @param String author : The book's writer
	 */
	public static void addingNewNodeDinamically(String description, String author) {

		Node newNode = new Node(description, author);

		if (head == null) {
			head = newNode;
			last = newNode;
		} else {
			last.next = newNode;
			last = newNode;
		}
		System.out.println();
	}
	
	/**
	 * This method add a new Node in the first position in the list
	 * 
	 * @param String description : The book's name
	 * @param String author : The book's writer
	 */
	public static void addingNewNodeAsFirstPosition(String description, String author) {

		Node newNode = new Node(description, author);
		Node temp = null;

		if (head == null) {
			head = newNode;
			last = newNode;
		} else {
			//Seting a temp as a head
			temp = head;
			
			//newMode.next will point do the first node in the list. In this moment, the node was add to left side
			newNode.next = temp;
			
			//The head will receive the new Head. This step was defined in step prior
			head = newNode;
		}
	}	
	
	/**
	 * This method add a new Node in the last position position in the list
	 * Basically, this behavior is default in list implementation
	 * 
	 * @param String description : The book's name
	 * @param String author : The book's writer
	 */
	public static void addingNewNodeAsLastPosition(String description, String author) {
		addingNewNodeDinamically(description,author);
	}	

	/**
	 * This method return the list size, counting each node from the list
	 * 
	 * @param without parameter
	 */
	public static int sizeList() {
		
		//This attribute will be returned with the list size
		int count = 0;
		
		//The current node is defined as a head list (first node)
		Node current = head;

		//Verifying if the node is not null, or if exist a node
		while (current != null) {
			
			//Existing the node, the attribute is increased in one 
			count++;
			
			//Attributing the new current node to test
			current = current.next;
		}
		
		//After all, returning the size of list
		return count;
	}

	/**
	 * This method shows all book's name
	 * 
	 * @param There is not parameter
	 */
	public static void showNodesFromList() {

		//Defining the current node as a head of list
		Node current = head;
		
		//Verifing if current node is null
		if (current == null) {
			
			//If current is null, so the list is empty
			System.out.println("List is empty");
			return;
		}
		
		//Looping to verify all nodes from list
		while (current != null) {
			
			//Printing the Book's name
			System.out.println(current.description + " ");
			
			//Getting the next book;
			current = current.next;
		}
	}
	
	/**
	 * This method calculate the price's average of all node(book) in the list.
	 *  
	 * @param : There is not parameter
	 */
	public static double averageValue() {
		
		//Starting the value as 0
		double value = 0;
		
		//Getting the initial node, the head
		Node current = head;
		
		//If current node if null (empty list) 
		if (current == null) {
			
			//The message informing it is showed
			System.out.println("List is empty");
			
			//Returning the empty List
			return 0;
		}
		
		//This loop sum all book's value
		while (current != null) {
			
			//Accumulating all values in value attribute
			value += current.value; 
			
			//Getting the next node
			current = current.next;
		}
		
		//Returning the value divided by list's size 
		return value/sizeList();
	}
	
	/**
	 * This method find the Node from list thats represents the middle of it.
	 *
	 * 
	 * @param Without parameter
	 */
	public static Node midleNode() {
		
		//Getting the middle of the list
		int size = sizeList()/2;
		
		//Creating a node for the first node from the list
		Node current = head;
		
		//If the node is null, the is is empty
		if (current == null) {
			
			//Informing empty list
			System.out.println("List is empty");

		}
		
		//Thnis loop find all nodes from the list, testing is the node current is not null and if the half of the list is done
		while (current != null && size >= 0) {
			
			//Getting the current node by pointer to the next node 
			current = current.next;
			
			//Decreasing the attribute
			size--;
		}
		
		//Returning the node who represent the middle of the list
		return current;
	}	
	
	/**
	 * This method find the node with descriptions informed as parameter 
	 * 
	 * 
	 * @param String description: The Book's name to search
	 * @return This method return the first node with the same description informed as parameter
	 */
	public static Node findByDescription(String description) {

		//Getting the first node from the list
		Node current = head;
		
		//Testing if the list is empty
		if (current == null) {
			
			//Informing empty list
			System.out.println("List is empty");
			return null;
		}
		
		//Getting all nodes from the list
		while (current != null) {
			
			//Testing if current node as the same name as informed
			if ( current.description == description ) {
				//If find, break the loop and finalize the process 
				break;
			}
			
			//Returning the node with name equal as informed
			current = current.next;
		}
		
		//Returning the node
		return current;
	}

	/**
	 * This method remove the node from the list
	 * This method need some improvements like: Reduce if tests by CASE structure
	 *  
	 * @param String description define the Book's name
	 */
	static boolean removeNodeFromList(String description) {
		
		boolean result = false;
		
		if ( findByDescription(description) != null ) {
			
			//Attributing the temp Node as Initial node
			Node temp = head;
			
			//Defining the prev node as null. (There is not node before the current node)
			Node prev = null;
			
			//This test verify if the head exist and has the description as informed, Basically this test verify if the first node is the target 
			if (temp != null && temp.description == description) {
				
				//If the head (first node) is the target the solution is attribute to it the next node beside of it.
				head = temp.next;
				result = true;
			}
			
			//This test verify if the first node has the description filed not equal as informed
			while (temp != null && temp.description != description) {
				
				//the prior node receive the temp, that has the head(first node) 
				prev = temp;
				
				//The temp receive the next node
				temp = temp.next;
				result = true;
			}
			
			//Testing if head is not exist
			if (temp == null)
				result = false;
			
			//Prev represent the first node in this moment
			prev.next = temp.next;
			
		}
		
		return result;
	}
	
	/**
	 * This method tests the class using differents method..
	 * Below has defined some operations for it. Please, try from different ways
	 */
	public static void main(String[] args) {

		addingNewNodeDinamically("The Lord of the Rings: The Fellowship of the Ring", "J. R. R. Tolkien");
		addingNewNodeDinamically("The Lord of the Rings: The Two Towers", "J. R. R. Tolkien");
		addingNewNodeDinamically("The Lord of the Rings: The Return of the King", "J. R. R. Tolkien");
		showNodesFromList();
		System.out.println("List size: " + sizeList());
		System.out.println();
		
		addingNewNodeAsFirstPosition("Harry Potter and the Philosopher's Stone", "J. R. R. Tolkien");
		showNodesFromList();
		System.out.println("List size: " + sizeList());
		System.out.println();
		
		addingNewNodeAsLastPosition("Harry Potter and the Chamber of Secrets", "J. R. R. Tolkien");
		showNodesFromList();
		System.out.println("List size: " + sizeList());
		System.out.println();		
		
		if (!findByDescription("The Lord of the Rings: The Two Towers").equals(null)) {
			System.out.println("The book exists");
		}else {
			//TODO When the Node is null, throws exception
			System.out.println("The book NOT exists");
		}
		
		Node n = findByDescription("The Lord of the Rings: The Two Towers");
		if (!n.equals(null)) {
			System.out.println("The book :"+ n.description +" exist");
		}else {
			//TODO When the Node is null, throws exception
			System.out.println("The book NOT exists");
		}
		
		System.out.println("The average price of all books is : "+ averageValue());
		System.out.println("The node from middle is : "+midleNode().description);
		System.out.println();
		
		n = findByDescription("The Lord of the Rings: The Fellowship of the Ring");
		if (!n.equals(null)) {
			System.out.println("The book :"+ n.description +" exist");
			System.out.println("List size: " + sizeList());
			System.out.println();
		}else {
			//TODO When the Node is null, throws exception
			System.out.println("The book NOT exists");
			System.out.println("List size: " + sizeList());
			System.out.println();			
		}		
		
		if ( removeNodeFromList("The Lord of the Rings: The Fellowship of the Ring")) {
			System.out.println("The title : The Lord of the Rings: The Fellowship of the Ring was removed from the list");
		}else {
			System.out.println("The title : The Lord of the Rings: The Fellowship of the Ring was NOT removed from the list");
		}		
		showNodesFromList();
		System.out.println("List size: " + sizeList());
		System.out.println();
		
		
		n = findByDescription("The Lord of the Rings: The Fellowship of the Ring");
		if ( n == null ) {
			System.out.println("The title: The Lord of the Rings: The Fellowship of the Ring NOT EXIST");			
		}		
		System.out.println("List size: " + sizeList());
		System.out.println();
		
	}
}